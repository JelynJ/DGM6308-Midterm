@page "/"
@inject AudioService AudioService
@inject NavigationManager NavigationManager
@using WebAssembly.Services

<div class="main-menu-container">
    <div class="main-menu-content">
        <!-- Game title -->
        <h1 class="game-title">Race To The Top</h1>
        <div class="menu-buttons">
            <!-- Button to start a new game -->
            <button class="menu-button start-button" @onclick="StartNewGame">
                <span class="button-text">Start New Game</span>
            </button>
            <!-- Button to show the game rules -->
            <button class="menu-button rules-button" @onclick="ShowRules">
                <span class="button-text">Rules</span>
            </button>
            <!-- Conditionally render the "Continue Game" button if there is a saved game -->
            @if (HasSavedGame)
            {
                <button class="menu-button continue-button" @onclick="ContinueGame">Continue Game</button>
            }
        </div>
    </div>
</div>

<style>
    /* Import the 'Modak' font face */
    font-face {
        font-family: 'Modak';
        src: url('css/fonts/Modak-Devanagari.ttf') format('truetype');
    }

    /* Global styles */
    body {
        margin: 0;
        background-color: #d197ff;
        color: #c9d1d9;
    }

    /* Styles for the main menu container */
    .main-menu-container {
        display: flex;
        justify-content: center;
        align-items: center;
        font-family: 'Modak', Arial, sans-serif;
        height: 100vh;
        background-color: #d197ff;
    }

    /* Styles for the main menu content */
    .main-menu-content {
        background-color: #161b22;
        padding: 3rem;
        border-radius: 10px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    /* Styles for the game title */
    .game-title {
        font-size: 6rem;
        color: #d197ff;
        text-shadow: 2px 2px 0 #000000;
        margin-bottom: 3rem;
        text-align: center;
    }

    /* Styles for the menu buttons container */
    .menu-buttons {
        display: flex;
        flex-direction: column;
        align-items: center;
        margin-top: 2rem;
    }

    /* Styles for the menu buttons */
    .menu-button {
        font-size: 2rem;
        padding: 1rem 2rem;
        margin: 1rem;
        border: none;
        border-radius: 5px;
        background-color: #d197ff;
        color: #c9d1d9;
        cursor: pointer;
        transition: background-color 0.3s ease, box-shadow 0.3s ease;
    }

        /* Hover styles for the menu buttons */
        .menu-button:hover {
            background-color: #000000;
            box-shadow: 0 5px 10px rgba(0, 0, 0, 0.2);
        }

    /* Styles for the button text */
    .button-text {
        -webkit-text-stroke: 2px #000000;
        paint-order: stroke fill;
    }

    /* Styles for the start button */
    .start-button {
        background-color: #d197ff;
        color: #ffffff;
    }

        /* Hover styles for the start button */
        .start-button:hover {
            background-color: #000000;
        }

    /* Styles for the rules button */
    .rules-button {
        background-color: #d197ff;
        color: #ffffff;
    }

        /* Hover styles for the rules button */
        .rules-button:hover {
            background-color: #000000;
        }
</style>

@code {
    // Property to track if there is a saved game
    private bool HasSavedGame { get; set; } = false;

    // Lifecycle method called when the component is initialized
    protected override async Task OnInitializedAsync()
    {
        // Play the background music
        await AudioService.PlayBGM("music/Pure Harmony.mp3");
    }

    // Lifecycle method called when the component parameters are set
    protected override async Task OnParametersSetAsync()
    {
        // Play the background music
        await AudioService.PlayBGM("music/Pure Harmony.mp3");
    }

    // Method to handle starting a new game
    private async void StartNewGame()
    {
        // Play the card select sound
        await AudioService.PlaySound("music/cardselect.mp3");
        // Navigate to the game page
        NavigationManager.NavigateTo("/game");
    }

    // Method to handle continuing a saved game
    private async void ContinueGame()
    {
        // Play the card select sound
        await AudioService.PlaySound("music/cardselect.mp3");
        // Navigate to the game page
        NavigationManager.NavigateTo("/game");
    }

    // Method to handle showing the game rules
    private async void ShowRules()
    {
        // Play the card select sound
        await AudioService.PlaySound("music/cardselect.mp3");
        // Navigate to the game rules page
        NavigationManager.NavigateTo("/game-rules");
    }
}