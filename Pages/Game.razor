@page "/game"
@inject NavigationManager NavigationManager
@inject AudioService AudioService
@inject IJSRuntime JSRuntime
@using WebAssembly.Models
@using WebAssembly.Services

<div class="page-container">
    <div class="game-container">
        <div class="game-header">
            <!-- Button to exit the game -->
            <button class="exit-button" @onclick="ExitGame">Exit!!</button>
            <!-- Game title -->
            <h1 class="game-title">Race To The Top</h1>
            <!-- Button to reset the game -->
            <button class="reset-button" @onclick="ResetGame">RESET</button>
        </div>

        <div class="game-board">
            <div class="computer-section">
                <div class="computer-hand">
                    <!-- Display the computer player's hand as face-down cards -->
                    @for (int i = 0; i < gameManager.computer.Hand.Count; i++)
                    {
                        <img src="images/cards/card_back.png" alt="Card Back" class="card computer-card" />
                    }
                </div>
                <div class="computer-player">
                    <!-- Display the computer player's icon and hand size -->
                    <span class="player-icon">C</span>
                    <span class="handsize">@gameManager.computer.Hand.Count</span>
                </div>
            </div>

            <div class="play-area">
                <div class="computer-play">
                    <!-- Display the cards played by the computer player -->
                    @foreach (var card in computerPlayCards)
                    {
                        <img src="@card.ImagePath" alt="@card.ToString()" class="card" />
                    }
                </div>
                <div class="player-play">
                    <!-- Display the cards played by the human player -->
                    @foreach (var card in playerPlayCards)
                    {
                        <img src="@card.ImagePath" alt="@card.ToString()" class="card" />
                    }
                </div>
            </div>

            <div class="player-section">
                <div class="human-player">
                    <!-- Display the human player's icon and hand size -->
                    <span class="player-icon">P</span>
                    <span class="handsize">@gameManager.human.Hand.Count</span>
                    <!-- Display the "Your turn!" message when it's the human player's turn -->
                    @if (showPlayerTurnMessage)
                    {
                        <div class="player-turn-message show">Your turn!</div>
                    }
                </div>
                <div class="player-hand">
                    <!-- Display the human player's hand -->
                    @foreach (var card in gameManager.human.Hand)
                    {
                        <img src="@card.ImagePath" alt="@card.ToString()" class="card human-card player-card @(gameManager.human.SelectedCards[gameManager.human.Hand.IndexOf(card)] ? "selected" : "")" @onclick="() => ToggleCardSelection(card)" />
                    }
                </div>
            </div>
        </div>

        <div class="game-controls">
            <!-- Button to show the game rules -->
            <button class="rule-button" @onclick="ShowRules">RULE</button>
            <!-- Button to play the selected cards -->
            <button class="play-button" @onclick="PlayCard">PLAY YOUR CARD!</button>
            <!-- Button to discard cards -->
            <button class="discard-button" @onclick="DiscardCards">DISCARD</button>
            <!-- Button to pass the turn -->
            <button class="pass-button" @onclick="PassTurn">PASS</button>
            <div class="menu-container">
                <!-- Button to toggle the menu -->
                <button class="menu-button" @onclick="ToggleMenu">...</button>
                <!-- Menu popup -->
                @if (isMenuOpen)
                {
                    <div class="menu-popup">
                        <!-- Button to open the GitHub repository -->
                        <button class="menu-item" @onclick="OpenGitHub">About</button>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<!-- CSS styles for the game page -->
<style>
    font-face {
        font-family: 'Modak';
        src: url('css/fonts/Modak-Devanagari.ttf') format('truetype');
    }

    body {
        margin: 0;
        background-color: #000000;
        color: #c9d1d9;
    }

    .page-container {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 100vh;
        width: 100%;
    }

    .game-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        font-family: 'Modak', -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
        -webkit-text-stroke: 1px #000000;
        color: #f5f5f5;
        background-color: #d197ff;
        padding: 20px;
        border-radius: 20px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    .game-header {
        display: flex;
        justify-content: space-between;
        width: 100%;
        align-items: center;
        margin-bottom: 20px;
        border-bottom: 2px solid #2c2c2e;
        padding-bottom: 10px;
    }

    .exit-button, .reset-button, .rule-button, .play-button, .discard-button, .menu-button {
        background-color: #000000;
        color: #fff;
        border: none;
        padding: 10px 20px;
        margin: 5px;
        font-size: 16px;
        border-radius: 10px;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

        .exit-button:hover, .reset-button:hover, .rule-button:hover, .play-button:hover, .discard-button:hover, .menu-button:hover {
            background-color: #d197ff;
        }

    .game-title {
        font-size: 60px;
        font-weight: 600;
        color: #000000;
    }

    .game-board {
        display: flex;
        flex-direction: column;
        align-items: center;
        width: 100%;
        background-color: rgba(0, 0, 0, 0.8);
        padding: 20px;
        border-radius: 20px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        margin-bottom: 20px;
    }

    .computer-section, .player-section {
        display: flex;
        justify-content: space-between;
        width: 100%;
        margin: 10px 0;
    }

    .computer-hand {
        display: flex;
        justify-content: space-around;
        align-items: center;
        padding: 10px 20px;
        background-color: rgba(56, 89, 161, 0.5);
    }

    .player-hand {
        display: flex;
        justify-content: space-around;
        align-items: center;
        padding: 10px 20px;
        background-color: rgba(237, 33, 144, 0.5);
    }

    .computer-player, .human-player {
        display: flex;
        flex-direction: column;
        align-items: center;
        margin: 0 20px;
        position: relative;
    }

    .pass-button {
        background-color: #000000;
        color: #fff;
        border: none;
        padding: 10px 20px;
        margin: 5px;
        font-size: 16px;
        border-radius: 10px;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

        .pass-button:hover {
            background-color: #d197ff;
        }

    .player-icon {
        font-size: 48px;
        font-weight: 600;
    }

    .computer-player .player-icon {
        color: #3859A1;
    }

    .human-player .player-icon {
        color: #ED2190;
    }

    .handsize {
        font-size: 24px;
        margin-top: 10px;
    }

    .computer-player .handsize {
        color: #3859A1;
    }

    .human-player .handsize {
        color: #ED2190;
    }

    .play-area {
        display: flex;
        flex-direction: column;
        align-items: center;
        background-color: #d197ff;
        padding: 20px;
        border-radius: 15px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        margin: 10px 0;
        width: 80%;
    }

    .computer-play, .player-play {
        display: flex;
        justify-content: space-around;
        margin: 10px 0;
    }

    .card {
        width: 64px;
        height: 64px;
        border-radius: 10px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        transition: transform 0.3s ease;
    }

    .computer-card {
        background-color: #3859A1;
    }

    .human-card {
        background-color: #ED2190;
    }

    .player-card:hover {
        transform: translateY(-10px);
    }

    .player-card.selected {
        transform: translateY(-20px);
        box-shadow: 0 0 10px rgba(10, 132, 255, 0.8);
    }

    .game-controls {
        display: flex;
        justify-content: space-around;
        width: 100%;
        margin-top: 20px;
    }

    .menu-container {
        position: relative;
    }

    .menu-popup {
        position: absolute;
        bottom: 100%;
        right: 0;
        background-color: rgba(0, 0, 0, 0.8);
        border-radius: 5px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        padding: 10px;
        margin-bottom: 5px;
    }

    .menu-item {
        background-color: transparent;
        color: #fff;
        border: none;
        font-size: 16px;
        cursor: pointer;
        padding: 5px 10px;
        transition: background-color 0.3s ease;
    }

        .menu-item:hover {
            background-color: #d197ff;
        }

    keyframes slide-out {
        0%

    {
        transform: translateX(0);
    }

    100% {
        transform: translateX(-100%);
    }

    }

    .slide-out {
        animation: slide-out 0.5s ease-in-out;
    }

    .player-turn-message {
        position: absolute;
        top: -50px;
        left: 50%;
        transform: translateX(-50%);
        background-color: #d197ff;
        color: #fff;
        padding: 5px 10px;
        border-radius: 5px;
        font-size: 14px;
        opacity: 0;
        transition: opacity 0.3s ease 0.2s;
    }

        .player-turn-message.show {
            opacity: 2;
        }

    .game-rules-container {
        max-width: 800px;
        margin: 0 auto;
        padding: 20px;
        font-family: Arial, sans-serif;
        background-color: #fff;
        border-radius: 10px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    .game-rules-title {
        font-size: 32px;
        font-weight: bold;
        margin-bottom: 20px;
        text-align: center;
        color: #fff;
    }

    .rule {
        margin-bottom: 30px;
    }

    .rule-title {
        font-size: 24px;
        font-weight: bold;
        margin-bottom: 10px;
        color: #fff;
    }

    .rule-description {
        font-size: 18px;
        line-height: 1.5;
        color: #fff;
    }

    .gameplay-rules, .valid-plays {
        list-style-type: disc;
        margin-left: 30px;
        font-size: 18px;
        line-height: 1.5;
        color: #fff;
    }

    .card-example {
        display: flex;
        justify-content: center;
        margin-top: 10px;
    }

    .rule-card {
        width: 128px;
        height: 128px;
        margin: 0 5px;
        border-radius: 5px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .back-button {
        display: block;
        width: 200px;
        height: 40px;
        margin: 20px auto 0;
        font-size: 18px;
        font-weight: bold;
        color: #fff;
        background-color: #000000;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

        .back-button:hover {
            background-color: #d197ff;
        }
</style>

<!-- Game over modal component -->
@if (isGameOver)
{
    <GameOverModal Winner="@winner" OnRestart="(async (withAnimation) => await RestartGame(withAnimation))" OnExit="ExitToMainMenu" />
}

@code {
    // Private fields
    private string winner = string.Empty;
    private bool isGameOver = false;
    private GameManager gameManager = new GameManager();
    private List<Card> playerPlayCards = new List<Card>();
    private List<Card> computerPlayCards = new List<Card>();
    private bool isHumanTurn = true;
    private bool isMenuOpen = false;
    private bool showPlayerTurnMessage = false;
    private bool isProcessingPass = false;
    private bool hasDiscardedThisTurn = false;
    private bool showRulesModal = false;

    // Lifecycle methods
    protected override async Task OnInitializedAsync()
    {
        // Subscribe to game events
        gameManager.PlayerMoveRequested += OnPlayerMoveRequested;
        gameManager.DiscardCardsRequested += OnDiscardCardsRequested;
        gameManager.PlayerPlayed += OnPlayerPlayed;
        gameManager.ComputerPlayed += OnComputerPlayed;
        gameManager.PlayerPassed += OnPlayerPassed;
        gameManager.GameOver += OnGameOver;
        gameManager.GameStateChanged += OnGameStateChanged;

        // Initialize the game
        gameManager.InitializeGame();

        // Perform the card dealing animation
        await DealCardsAnimation();

        // Start the game
        await gameManager.PlayGame();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Play the background music when the component is first rendered
            await AudioService.PlayBGM("music/Pure Harmony.mp3");
        }
    }

    // Private methods
    private async Task DealCardsAnimation()
    {
        // Play the card shuffling sound
        await AudioService.PlaySound("music/shuffle-cards.mp3");

        var players = new List<Player> { gameManager.human, gameManager.computer };
        var delay = 100;

        foreach (var player in players)
        {
            for (int i = 0; i < player.Hand.Count; i++)
            {
                if (player == gameManager.human)
                {
                    // Animate the human player's cards
                    player.SelectedCards[i] = true;
                    await InvokeAsync(StateHasChanged);
                    await Task.Delay(delay);
                    player.SelectedCards[i] = false;
                }
                else
                {
                    // Animate the computer player's cards
                    await InvokeAsync(StateHasChanged);
                    await Task.Delay(delay);
                }
            }
        }

        await InvokeAsync(StateHasChanged);
    }

    private async Task RestartGame(bool withAnimation)
    {
        // Reset the game over state
        isGameOver = false;

        // Process the game restart
        gameManager.ProcessRestartGame();

        if (withAnimation)
        {
            // Perform the card dealing animation if requested
            await DealCardsAnimation();
        }

        // Update the UI
        UpdateUI();
    }

    private void OnGameStateChanged()
    {
        // Update the UI when the game state changes
        UpdateUI();
    }

    private async void OnPlayerPlayed(List<Card> cards)
    {
        // Perform the card playing animation for the human player
        await PlayCardsAnimation(cards, playerPlayCards);
    }

    private async void OnComputerPlayed(List<Card> cards)
    {
        // Perform the card playing animation for the computer player
        await PlayCardsAnimation(cards, computerPlayCards);
    }

    private void OnPlayerPassed()
    {
        // Update the UI when the human player passes
        UpdateUI();
    }

    private void OnGameOver(Player winner)
    {
        // Set the winner and game over state
        this.winner = winner.Name;
        isGameOver = true;

        // Trigger a UI update
        InvokeAsync(StateHasChanged);
    }

    private void OnPlayerMoveRequested(string playerName)
    {
        // Trigger a UI update when the human player's move is requested
        InvokeAsync(() => StateHasChanged());
    }

    private void OnDiscardCardsRequested(int maxDiscardCount)
    {
        // Trigger a UI update when the human player is requested to discard cards
        InvokeAsync(() => StateHasChanged());
    }

    private void PlayCard()
    {
        // Process the human player's card play
        gameManager.ProcessPlayCards();

        // Reset the discard state
        hasDiscardedThisTurn = false;

        // Log the current play state
        Console.WriteLine(gameManager.canPlayAnyCard);

        // Notify the game manager that the human player has made a move
        gameManager.PlayerMoved();

        // Update the UI
        UpdateUI();
    }

    private void DiscardCards()
    {
        if (!hasDiscardedThisTurn)
        {
            // Set the discard state
            hasDiscardedThisTurn = true;

            // Process the card discard
            gameManager.ProcessDiscardCount();

            // Update the UI
            UpdateUI();
        }
    }

    private void PassTurn()
    {
        if (!isProcessingPass)
        {
            // Set the pass processing state
            isProcessingPass = true;

            // Process the turn pass
            gameManager.ProcessPassTurn();

            // Reset the discard state
            hasDiscardedThisTurn = false;

            // Notify the game manager that the human player has made a move
            gameManager.PlayerMoved();

            // Reset the pass processing state
            isProcessingPass = false;
        }
    }

    private async void ResetGame()
    {
        // Reset the discard state
        hasDiscardedThisTurn = false;

        // Process the game restart
        gameManager.ProcessRestartGame();

        // Perform the card dealing animation
        await DealCardsAnimation();

        // Update the UI
        UpdateUI();
    }

    private async void ExitGame()
    {
        // Stop the background music
        await AudioService.StopBGM();

        // Navigate to the main menu
        NavigationManager.NavigateTo("/", true);
    }

    private async void ToggleCardSelection(Card card)
    {
        int index = gameManager.human.Hand.IndexOf(card);
        if (index >= 0 && index < gameManager.human.SelectedCards.Length)
        {
            await InvokeAsync(() =>
            {
                // Toggle the card selection state
                gameManager.human.SelectedCards[index] = !gameManager.human.SelectedCards[index];

                // Trigger a UI update
                StateHasChanged();
            });

            // Play the card selection sound
            await AudioService.PlaySound("music/cardselect.mp3");
        }
    }

    private async void ExitToMainMenu()
    {
        // Stop the background music
        await AudioService.StopBGM();

        // Navigate to the main menu
        NavigationManager.NavigateTo("/", true);
    }

    private void ShowRules()
    {
        // Toggle the rules modal visibility
        showRulesModal = !showRulesModal;
    }

    private void ToggleMenu()
    {
        // Toggle the menu visibility
        isMenuOpen = !isMenuOpen;
    }

    private void OpenGitHub()
    {
        // Navigate to the GitHub repository
        NavigationManager.NavigateTo("https://github.com/JelynJ/DGM6308-Midterm", true);
    }

    private async Task PlayCardsAnimation(List<Card> cards, List<Card> playCards)
    {
        var delay = 250;

        foreach (var card in cards)
        {
            // Add the card to the play area
            playCards.Add(card);

            // Play the card selection sound
            await AudioService.PlaySound("music/cardselect.mp3");

            // Trigger a UI update
            await InvokeAsync(StateHasChanged);

            // Get the card element reference
            var cardElement = await JSRuntime.InvokeAsync<IJSObjectReference>("document.querySelector", $".card[alt='{card.ToString()}']");
            if (cardElement != null)
            {
                // Add the "played-card" class to the card element
                await cardElement.InvokeVoidAsync("classList.add", "played-card");
            }

            // Delay before playing the next card
            await Task.Delay(delay);
        }

        // Delay before updating the UI
        await Task.Delay(1000);

        // Update the UI
        UpdateUI();
    }

    private void UpdateUI()
    {
        // Update the play area display
        playerPlayCards = gameManager.PlayerCurrentPlay;
        computerPlayCards = gameManager.ComputerCurrentPlay;

        // Update the current player indication
        isHumanTurn = gameManager.CurrentPlayer == gameManager.human;
        showPlayerTurnMessage = isHumanTurn;

        // Update the human player's card selection state
        gameManager.human.SelectedCards = new bool[gameManager.human.Hand.Count];

        // Trigger a UI update
        InvokeAsync(() => StateHasChanged());
    }
}

<!-- Game rules modal -->
@if (showRulesModal)
{
    <div class="rules-overlay">
        <div class="rules-container">
            <h1 class="game-rules-title">Game Rules</h1>

            <div class="rule">
                <h2 class="rule-title">Objective</h2>
                <p class="rule-description">
                    The objective of the game is to be the first player to get rid of all your cards.
                </p>
            </div>

            <div class="rule">
                <h2 class="rule-title">Setup</h2>
                <p class="rule-description">
                    The game is played with a standard deck of 52 cards (without jokers). Each player is dealt 17 cards, and the remaining 18 cards form the draw pile.
                </p>
            </div>

            <div class="rule">
                <h2 class="rule-title">Gameplay</h2>
                <ul class="gameplay-rules">
                    <li>The player with the 3 of Spades starts the game by playing any card or combination of cards.</li>
                    <li>The next player must play a card or combination of cards that beats the previous play.</li>
                    <li>If a player cannot beat the previous play, they must pass their turn.</li>
                    <li>When all players pass, the last player to make a successful play can start a new round with any card or combination of cards.</li>
                    <li>Please ignore the suits!</li>
                    <li>The penalty for an invalid play is that the opponent gets an extra turn.</li>
                </ul>
            </div>

            <div class="rule">
                <h2 class="rule-title">Valid Plays</h2>
                <p class="rule-description">
                    The following are valid plays:
                </p>
                <ul class="valid-plays">
                    <li>
                        <strong>Single:</strong> A single card of any rank.
                        <div class="card-example">
                            <img src="images/cards/card_hearts_07.png" alt="7 of Hearts" class="rule-card" />
                        </div>
                    </li>
                    <li>
                        <strong>Pair:</strong> Two cards of the same rank.
                        <div class="card-example">
                            <img src="images/cards/card_clubs_09.png" alt="9 of Clubs" class="rule-card" />
                            <img src="images/cards/card_diamonds_09.png" alt="9 of Diamonds" class="rule-card" />
                        </div>
                    </li>
                    <li>
                        <strong>Sisters:</strong> Two consecutive pairs.
                        <div class="card-example">
                            <img src="images/cards/card_clubs_09.png" alt="9 of Clubs" class="rule-card" />
                            <img src="images/cards/card_diamonds_09.png" alt="9 of Diamonds" class="rule-card" />
                            <img src="images/cards/card_spades_10.png" alt="10 of Spades" class="rule-card" />
                            <img src="images/cards/card_hearts_10.png" alt="10 of Hearts" class="rule-card" />
                        </div>
                    </li>
                    <li>
                        <strong>Triple:</strong> Three cards of the same rank.
                        <div class="card-example">
                            <img src="images/cards/card_spades_J.png" alt="Jack of Spades" class="rule-card" />
                            <img src="images/cards/card_hearts_J.png" alt="Jack of Hearts" class="rule-card" />
                            <img src="images/cards/card_diamonds_J.png" alt="Jack of Diamonds" class="rule-card" />
                        </div>
                    </li>
                    <li>
                        <strong>Captives (Three with Two):</strong> Three cards of the same rank, accompanied by a pair. The ranking is based on the triple.
                        <div class="card-example">
                            <img src="images/cards/card_spades_J.png" alt="Jack of Spades" class="rule-card" />
                            <img src="images/cards/card_hearts_J.png" alt="Jack of Hearts" class="rule-card" />
                            <img src="images/cards/card_diamonds_J.png" alt="Jack of Diamonds" class="rule-card" />
                            <img src="images/cards/card_clubs_09.png" alt="9 of Clubs" class="rule-card" />
                            <img src="images/cards/card_diamonds_09.png" alt="9 of Diamonds" class="rule-card" />
                        </div>
                    </li>
                    <li>
                        <strong>Straight:</strong> Five cards of consecutive rank. (Lowest - 34567, Highest - JQKA2)
                        <div class="card-example">
                            <img src="images/cards/card_clubs_08.png" alt="8 of Clubs" class="rule-card" />
                            <img src="images/cards/card_diamonds_09.png" alt="9 of Diamonds" class="rule-card" />
                            <img src="images/cards/card_spades_10.png" alt="10 of Spades" class="rule-card" />
                            <img src="images/cards/card_hearts_J.png" alt="Jack of Hearts" class="rule-card" />
                            <img src="images/cards/card_clubs_Q.png" alt="Queen of Clubs" class="rule-card" />
                        </div>
                    </li>
                    <li>
                        <strong>Bomb:</strong> Four cards of the same rank. A bomb can beat any other play except a higher bomb.
                        <div class="card-example">
                            <img src="images/cards/card_spades_A.png" alt="Ace of Spades" class="rule-card" />
                            <img src="images/cards/card_hearts_A.png" alt="Ace of Hearts" class="rule-card" />
                            <img src="images/cards/card_clubs_A.png" alt="Ace of Clubs" class="rule-card" />
                            <img src="images/cards/card_diamonds_A.png" alt="Ace of Diamonds" class="rule-card" />
                        </div>
                    </li>
                </ul>
            </div>

            <div class="rule">
                <!-- Description of the discarding and drawing cards rule -->
                <h2 class="rule-title">Discarding and Drawing Cards</h2>
                <p class="rule-description">
                    At the start of each turn, a player can choose to discard up to 9 cards and draw an equal number of cards from the draw pile. The discarded cards are placed at the bottom of the draw pile.
                </p>
            </div>

            <!-- Button to close the rules modal -->
            <button class="close-rules-button" @onclick="ShowRules">Close</button>
        </div>
    </div>
}
